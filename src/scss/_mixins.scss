@use 'sass:math';
@use 'sass:list';

@use "vars" as *;

@mixin media-query($media-query) {
  @if $media-query == small {
    @media only screen and (max-width: $medium) {
      @content;
    }
  }

  @if $media-query == ipad {
    @media all and (min-width: #{$medium + 1}) and (max-width: 1366px) {
      @content;
    }
  }

  @if $media-query == landscape {
    @media (orientation: landscape) {
      @content;
    }
  }

  @if $media-query == portrait {
    @media (orientation: portrait) and (max-width: $medium) {
      @content;
    }
  }
}

@mixin small-only {
  @include media-query(small) {
    @content;
  }
}

@mixin ipad {
  @include media-query(ipad) {
    @content;
  }
}

@mixin landscape {
  @include media-query(landscape) {
    @content;
  }
}

@mixin portrait {
  @include media-query(portrait) {
    @content;
  }
}

$rem-base: 16px;
@function strip-unit($num) {
  @return math.div($num, ($num * 0 + 1));
}

@function convert-to-rem($value, $base-value: $rem-base) {
  $value: math.div(strip-unit($value), strip-unit($base-value)) * 1rem;
  @if ($value == 0rem) {
    $value: 0;
  }
  // Turn 0rem into 0
  @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
  $max: list.length($values);
  @if $max == 1 {
    @return convert-to-rem(list.nth($values, 1), $base-value);
  }
  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append(
      $remValues,
      convert-to-rem(list.nth($values, $i), $base-value)
    );
  }
  @return $remValues;
}
